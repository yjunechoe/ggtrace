% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-highjack.R, R/aliases.R
\name{ggtrace_highjack_args}
\alias{ggtrace_highjack_args}
\alias{highjack_args}
\title{Highjack a method's execution and modify its argument values}
\usage{
ggtrace_highjack_args(x, method, cond = 1L, values, ..., draw = TRUE)

highjack_args(x, method, cond = 1L, values, ..., draw = TRUE)
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{cond}{When the return value should be replaced. Defaults to \code{1L}.}

\item{values}{A named list of variable-value pairings.
When values are expressions, they are evaluated in the formals.}

\item{...}{Unused.}

\item{draw}{Whether to draw the modified graphical output from evaluating \code{x}.
Defaults to \code{TRUE}.}
}
\value{
A gtable object with class \verb{<ggtrace_highjacked>}
}
\description{
Highjack a method's execution and modify its argument values
}
\section{Tracing context}{

When quoted expressions are passed to the \code{cond} or \code{value} argument of
workflow functions they are evaluated in a special environment which
we call the "tracing context".

The tracing context is "data-masked" (see \code{rlang::eval_tidy()}), and exposes
an internal variable called \code{._counter_} which increments every time a
function/method has been called by the ggplot object supplied to the \code{x}
argument of workflow functions. For example, \code{cond = quote(._counter_ == 1L)}
is evaluated as \code{TRUE} when the method is called for the first time. The
\code{cond} argument also supports numeric shorthands like \code{cond = 1L} which evaluates to
\code{quote(._counter_ == 1L)}, and this is the default value of \code{cond} for
all workflow functions that only return one value (e.g., \code{capture_fn()}).
It is recommended to consult the output of \code{inspect_n()} and
\code{inspect_which()} to construct expressions that condition on \code{._counter_}.

For highjack functions like \code{highjack_return()}, the value about to
be returned by the function/method can be accessed with \code{returnValue()} in the
\code{value} argument. By default, \code{value} is set to \code{quote(returnValue())} which
simply evaluates to the return value, but directly computing on \code{returnValue()} to
derive a different return value for the function/method is also possible.
}

\examples{

set.seed(1116)
library(ggplot2)
library(dplyr)


p <- ggplot(mtcars, aes(mpg, hp, color = factor(cyl))) +
  geom_point() +
  geom_smooth(method = "lm")
p

# Fit predictions from loess regression just for second group
highjack_args(
  x = p,
  method = StatSmooth$compute_group,
  cond = quote(data$group[1] == 2),
  values = list(method = loess)
)

# If value is an expression, it's evaluated in the Tracing Context
highjack_args(
  x = p,
  method = StatSmooth$compute_group,
  values = rlang::exprs(

    # Every time the method is called, call it with a bigger CI
    level = ._counter_ * 0.3,

    # Fit models to just a random sample of the data
    data = data \%>\%
      slice_sample(prop = .8)

  )
)
}
