% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-inspect.R, R/aliases.R
\name{ggtrace_inspect_which}
\alias{ggtrace_inspect_which}
\alias{inspect_which}
\title{Inspect which calls to a ggproto method met a particular condition}
\usage{
ggtrace_inspect_which(x, method, cond, ..., error = FALSE)

inspect_which(x, method, cond, ..., error = FALSE)
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{cond}{Expression evaluating to a logical inside \code{method} when \code{x} is evaluated.}

\item{...}{Unused.}

\item{error}{If \code{TRUE}, continues inspecting the method until the ggplot errors.
This is useful for debugging but note that it can sometimes return incomplete output.}
}
\value{
The values of the tracing context variable \code{._counter_} when \code{cond} is evaluated as \code{TRUE}.
}
\description{
Inspect which calls to a ggproto method met a particular condition
}
\section{Tracing context}{

When quoted expressions are passed to the \code{cond} or \code{value} argument of
workflow functions they are evaluated in a special environment which
we call the "tracing context".

The tracing context is "data-masked" (see \code{rlang::eval_tidy()}), and exposes
an internal variable called \code{._counter_} which increments every time a
function/method has been called by the ggplot object supplied to the \code{x}
argument of workflow functions. For example, \code{cond = quote(._counter_ == 1L)}
is evaluated as \code{TRUE} when the method is called for the first time. The
\code{cond} argument also supports numeric shorthands like \code{cond = 1L} which evaluates to
\code{quote(._counter_ == 1L)}, and this is the default value of \code{cond} for
all workflow functions that only return one value (e.g., \code{ggtrace_capture_fn()}).
It is recommended to consult the output of \code{ggtrace_inspect_n()} and
\code{ggtrace_inspect_which()} to construct expressions that condition on \code{._counter_}.

For highjack functions like \code{ggtrace_highjack_return()}, the value about to
be returned by the function/method can be accessed with \code{returnValue()} in the
\code{value} argument. By default, \code{value} is set to \code{quote(returnValue())} which
simply evaluates to the return value, but directly computing on \code{returnValue()} to
derive a different return value for the function/method is also possible.
}

\examples{

library(ggplot2)

p1 <- ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut)) +
  facet_wrap(~ clarity)
p1


# Values of `._counter_` when `compute_group` is called for groups in the second panel:
ggtrace_inspect_which(p1, StatCount$compute_group, quote(data$PANEL[1] == 2))


# How about if we add a second layer that uses StatCount?
p2 <- p1 + geom_text(
  aes(label = after_stat(count)),
  stat = StatCount, position = position_nudge(y = 500)
)
p2

ggtrace_inspect_which(p2, StatCount$compute_group, quote(data$PANEL[1] == 2))


# Behaves like `base::which()` and returns `integer(0)` when no matches are found
ggtrace_inspect_which(p2, StatBoxplot$compute_group, quote(data$PANEL[1] == 2))

}
