% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-highjack.R, R/aliases.R
\name{ggtrace_highjack_return}
\alias{ggtrace_highjack_return}
\alias{highjack_return}
\title{Highjack a method's execution and make it return a user-supplied value}
\usage{
ggtrace_highjack_return(
  x,
  method,
  cond = 1L,
  value = quote(returnValue()),
  ...,
  draw = TRUE
)

highjack_return(
  x,
  method,
  cond = 1L,
  value = quote(returnValue()),
  ...,
  draw = TRUE
)
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{cond}{When the return value should be replaced. Defaults to \code{1L}.}

\item{value}{What the method should return instead. Defaults to \code{quote(returnValue())}.}

\item{...}{Unused.}

\item{draw}{Whether to draw the modified graphical output from evaluating \code{x}.
Defaults to \code{TRUE}.}
}
\value{
A gtable object with class \verb{<ggtrace_highjacked>}
}
\description{
Highjack a method's execution and make it return a user-supplied value
}
\section{Tracing context}{

When quoted expressions are passed to the \code{cond} or \code{value} argument of
workflow functions they are evaluated in a special environment which
we call the "tracing context".

The tracing context is "data-masked" (see \code{rlang::eval_tidy()}), and exposes
an internal variable called \code{._counter_} which increments every time a
function/method has been called by the ggplot object supplied to the \code{x}
argument of workflow functions. For example, \code{cond = quote(._counter_ == 1L)}
is evaluated as \code{TRUE} when the method is called for the first time. The
\code{cond} argument also supports numeric shorthands like \code{cond = 1L} which evaluates to
\code{quote(._counter_ == 1L)}, and this is the default value of \code{cond} for
all workflow functions that only return one value (e.g., \code{ggtrace_capture_fn()}).
It is recommended to consult the output of \code{ggtrace_inspect_n()} and
\code{ggtrace_inspect_which()} to construct expressions that condition on \code{._counter_}.

For highjack functions like \code{ggtrace_highjack_return()}, the value about to
be returned by the function/method can be accessed with \code{returnValue()} in the
\code{value} argument. By default, \code{value} is set to \code{quote(returnValue())} which
simply evaluates to the return value, but directly computing on \code{returnValue()} to
derive a different return value for the function/method is also possible.
}

\examples{

set.seed(1116)
library(ggplot2)
library(dplyr)


p1 <- ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut)) +
  facet_wrap(~ clarity)

p1

# Highjack `Stat$compute_panel` at the first panel
# to return higher values for `count`
ggtrace_highjack_return(
  x = p1, method = Stat$compute_panel,
  value = quote({
    returnValue() \%>\%
      mutate(count = count * 100)
  })
)

# Highjack `Stat$compute_panel` at the fourth panel
# to shuffle bars in the x-axis
ggtrace_highjack_return(
  x = p1, method = Stat$compute_panel,
  cond = quote(data$PANEL[1] == 4),
  value = quote({
    returnValue() \%>\%
      mutate(x = sample(x))
  })
)
}
