% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggbody.R
\name{ggbody}
\alias{ggbody}
\title{Retrieve the body of a ggproto method as a list}
\usage{
ggbody(method, inherit = FALSE)
}
\arguments{
\item{method}{An expression that evaluates to the ggproto method.
This may be specified using any of the following forms:\preformatted{- `ggproto$method`

- `namespace::ggproto$method`

- `namespace:::ggproto$method`
}}

\item{inherit}{Whether the method should be returned from its closest parent. Defaults to \code{FALSE}.
If \code{TRUE}, returns the parent's method and the corresponding \code{ggbody()} code as a message.}
}
\value{
A list
}
\description{
Retrieve the body of a ggproto method as a list
}
\details{
\code{ggbody()} calls \code{as.list(body(get("method", ggproto)))} under the hood.
The \code{get("method", ggproto)} syntax is the long form of \code{ggproto$method} which retrieves
the actual function body. This is a subtle but important difference for inspecting ggproto methods.
\itemize{
\item For example, this works: \code{debugonce(get("compute_group", StatCount))}
\item But this fails to insert a break point: \code{debugonce(StatCount$compute_group)}
}

\code{ggbody()} was designed so that you do not have to worry about this distinction.
}
\examples{
\dontrun{
library(ggplot2)

ggbody(StatCount$compute_group)

# Works for ggproto in extension packages

ggbody(ggforce::StatDelaunaySegment$compute_group)

library(ggforce)
ggbody(StatBezier$compute_panel)

# `inherit = TRUE` will return the method from the closest parent

## ERRORS:
## ggbody(StatBoxplot$compute_panel)
ggbody(StatBoxplot$compute_panel, inherit = TRUE)
ggbody(Stat$compute_panel)

# Navigating complex inheritance
class(GeomArcBar)
invisible(ggbody(GeomArcBar$default_aes, inherit = TRUE)) # self
invisible(ggbody(GeomArcBar$draw_panel, inherit = TRUE))  # parent
invisible(ggbody(GeomArcBar$draw_key, inherit = TRUE))    # grandparent
invisible(ggbody(GeomArcBar$draw_group, inherit = TRUE))  # top-level

# Works for custom ggproto
# - Example from {ggplot2} "Extending ggplot2" vignette
StatDensityCommon <- ggproto("StatDensityCommon", Stat,
  required_aes = "x",

  setup_params = function(data, params) {
    if (!is.null(params$bandwidth))
      return(params)

    xs <- split(data$x, data$group)
    bws <- vapply(xs, bw.nrd0, numeric(1))
    bw <- mean(bws)
    message("Picking bandwidth of ", signif(bw, 3))

    params$bandwidth <- bw
    params
  },

  compute_group = function(data, scales, bandwidth = 1) {
    d <- density(data$x, bw = bandwidth)
    data.frame(x = d$x, y = d$y)
  }
)

as.list(body(get("compute_group", StatDensityCommon)))

ggbody(StatDensityCommon$compute_group)

}
}
