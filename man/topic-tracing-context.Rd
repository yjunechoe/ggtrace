% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/topic-tracing-context.R
\name{topic-tracing-context}
\alias{topic-tracing-context}
\title{Context-dependent workflow expressions in the tracing context}
\description{
Context-dependent workflow expressions in the tracing context
}
\section{Tracing context}{

When quoted expressions are passed to the \code{cond} or \code{value} argument of
workflow functions they are evaluated in a special environment which
we call the "tracing context".

The tracing context is "data-masked" (see \code{rlang::eval_tidy()}), and exposes
an internal variable called \code{._counter_} which increments every time a
function/method has been called by the ggplot object supplied to the \code{x}
argument of workflow functions. For example, \code{cond = quote(._counter_ == 1L)}
is evaluated as \code{TRUE} when the method is called for the first time. The
\code{cond} argument also supports numeric shorthands like \code{cond = 1L} which evaluates to
\code{quote(._counter_ == 1L)}, and this is the default value of \code{cond} for
all workflow functions that only return one value (e.g., \code{capture_fn()}).
It is recommended to consult the output of \code{inspect_n()} and
\code{inspect_which()} to construct expressions that condition on \code{._counter_}.

For highjack functions like \code{highjack_return()}, the value about to
be returned by the function/method can be accessed with \code{returnValue()} in the
\code{value} argument. By default, \code{value} is set to \code{quote(returnValue())} which
simply evaluates to the return value, but directly computing on \code{returnValue()} to
derive a different return value for the function/method is also possible.
}

\keyword{internal}
