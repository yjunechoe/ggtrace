% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/with_ggtrace.R
\name{with_ggtrace}
\alias{with_ggtrace}
\title{Apply a ggtrace call to a single ggplot object}
\usage{
with_ggtrace(x, ..., out = c("tracedump", "gtable", "both"))
}
\arguments{
\item{x}{A ggplot object whose evaluation triggers the trace as specified by the \code{...}}

\item{...}{
  Arguments passed on to \code{\link[=ggtrace]{ggtrace}}
  \describe{
    \item{\code{trace_steps}}{A sorted numeric vector of positions in the method's body to trace. Negative indices
reference steps from the last, where \code{-1} references the last step in the body.}
    \item{\code{trace_exprs}}{A list of expressions to evaluate at each position specified
in \code{trace_steps}. If a single expression is provided, it is recycled to match the length of \code{trace_steps}.

To simply run a step and return its output, you can use the \code{~step} keyword. If the step
is an assign expression, the value of the assigned variable is returned.
If \code{trace_exprs} is not provided, \code{ggtrace()} is called with \code{~step} by default.}
    \item{\code{once}}{Whether to \code{untrace()} the method on exit. If \code{FALSE}, creates a persistent trace which is
active until \code{gguntrace()} is called on the method. Defaults to \code{TRUE}.}
    \item{\code{use_names}}{Whether the trace dump should use the names from \code{trace_exprs}. Defaults to \code{TRUE}.}
    \item{\code{print_output}}{Whether to \code{print()} the output of each expression to the console. Defaults to \code{TRUE}.}
    \item{\code{verbose}}{Whether logs should be printed when trace is triggered. Encompasses \code{print_output},
meaning that \code{verbose = FALSE} also triggers the effect of \code{print_output = FALSE} by consequence.
Defaults to \code{FALSE}.}
    \item{\code{method}}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}
  }}

\item{out}{Whether the function should return the output of triggered traces
("tracedump"), or the resulting graphical object from evaluating the ggplot ("gtable"),
or "both", which returns the tracedump but also renders the resulting plot as a
side effect. Partial matching is supported, so these options could also be specified as
"t", "g", or "b". Defaults to "tracedump".}
}
\value{
A list or gtable object of class \verb{<ggtrace_highjacked>}
}
\description{
\code{with_ggtrace()} provides a functional interface to \code{ggtrace()}. It takes a ggplot object
and parameters passed to \code{ggtrace()} and returns the immediate tracedump without side effects.
}
\details{
It is the lower-level function that powers all workflow functions in \code{{ggtrace}}.
}
\note{
To force evaluation of \code{x}, \code{ggeval_silent(x)} is called internally.
}
\examples{
library(ggplot2)

# Long-form `ggtrace()` method:
boxplot_plot <- ggplot(diamonds[1:500,], aes(cut, depth)) + geom_boxplot()
ggtrace(
 method = StatBoxplot$compute_group,
 trace_steps = -1, trace_exprs = quote(~step)
)
boxplot_plot
first_tracedump <- last_ggtrace()

# Short-form functional `with_ggtrace()` method:
second_tracedump <- with_ggtrace(
  x = boxplot_plot,
  method = StatBoxplot$compute_group,
  trace_steps = -1, trace_exprs = quote(~step)
)

identical(first_tracedump, second_tracedump)


# An example with `out = "gtable"` (or `"g"`)
grid_plot <- ggplot(mtcars, aes(mpg, hp)) +
  geom_point() +
  facet_grid(am ~ cyl)
grid_plot

outline <- grid::rectGrob(
  x = 0.5, y = 0.5, width = 1, height = 1,
  gp = grid::gpar(col = "red", lwd = 5, fill = NA)
)

with_ggtrace(
  x = grid_plot,
  method = Layout$render,
  trace_steps = 5,
  trace_exprs = rlang::expr({
    panels[c(3, 5)] <- lapply(panels[c(3, 5)], function(panel) {
      gTree(children = gList(panel, !!outline))
    })
  }),
  out = "gtable" # or "g"
)

}
\seealso{
\code{\link[=ggtrace]{ggtrace()}}, \code{\link[=ggeval_silent]{ggeval_silent()}}
}
