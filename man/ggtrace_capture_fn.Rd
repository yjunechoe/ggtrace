% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-capture.R
\name{ggtrace_capture_fn}
\alias{ggtrace_capture_fn}
\title{Capture a snapshot of a method as a pre-filled function}
\usage{
ggtrace_capture_fn(x, method, cond = quote(._counter_ == 1))
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{cond}{When the method should be captured and returned as function. Defaults to \code{TRUE}.
Given that only one value is returned by \code{ggtrace_capture_fn}, the default
value is the return value from the first time the method runs.}
}
\value{
A function
}
\description{
Returns a ggproto method as a function with arguments pre-filled to their values when it was first called
}
\note{
For functions and methods that take \code{...}, arguments passed to \code{...} are captured and
promoted to function arguments. The captured values are available for inspection via \code{formals()}.
}
\examples{
library(ggplot2)

set.seed(47)
df <- as.data.frame(matrix(sample(5, 50, TRUE), ncol = 2))
df

base <- ggplot(df, aes(x = V1, y = V2))

p1 <- base + stat_summary(orientation = "x")
p1

p1_compute_panel <- ggtrace_capture_fn(p1, method = StatSummary$compute_panel)

# `p1_compute_panel` is a copy of the ggproto method
body(p1_compute_panel)
ggbody(StatSummary$compute_panel, as.list = FALSE)

# Its arguments are pre-filled (captured at runtime)
formals(p1_compute_panel)

# Runs as it should
p1_compute_panel()

# You can inspect changes to its behavior outisde of ggplot
# For example, see what happens when aes is flipped via `orientation = "y"`
p1_compute_panel(flipped_aes = TRUE)

# We confirm this output to be true when `orientation = "y"` in `stat_summary()`
p2 <- base + stat_summary(orientation = "y")
p2_compute_panel <- ggtrace_capture_fn(p2, method = StatSummary$compute_panel)

identical(p1_compute_panel(flipped_aes = TRUE), p2_compute_panel())

# You can interactively explore with `debugonce(p2_compute_panel)`


# Note that the captured method looks slightly different if the method takes `...`
p3 <- base + stat_smooth() + geom_jitter()
p3

p3_compute_panel <- ggtrace_capture_fn(p3, method = Stat$compute_panel)

# For one, the body is different
body(p3_compute_panel)

# The captured method is called internally, stored in the `"inner"` attribute
attr(p3_compute_panel, "inner")

# Captured argument defaults are again available for inspection via `formals()`
# Note that arguments passed to the `...` are promoted to function arguments
names(ggformals(Stat$compute_panel))
names(formals(p3_compute_panel))

# It works the same otherwise - plus you get the benefit of autocomplete
head(p3_compute_panel())
head(p3_compute_panel(level = .99)[, c("ymin", "ymax")])
head(p3_compute_panel(flipped_aes = TRUE))

# Interactively explore with `debugonce(attr(p3_compute_panel, "inner"))`

}
