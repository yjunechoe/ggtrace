% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-capture.R
\name{ggtrace_capture_method}
\alias{ggtrace_capture_method}
\title{Capture a ggproto method as a function at run-time}
\usage{
ggtrace_capture_method(x, ...)
}
\arguments{
\item{x}{A ggplot object}

\item{...}{Passed to \code{ggtrace()}. For most usecases, it suffices to
just provide a ggproto method to the \code{method} argument.}
}
\value{
A function
}
\description{
Returns a ggproto method as a function with arguments pre-filled to
their values upon entering the function.
}
\note{
For methods that take \code{...}, if arguments are passed to \code{...} in runtime, they're captured and
stored in the \code{.dots_captured} argument of the returned function, accessible via \code{formals(x)$.dots_captured}.
The returned function will also expose the \code{...}, and the defaults in \code{.dots_captured} will be passed
to the captured method unless also provided in the \code{...}
}
\examples{
library(ggplot2)

set.seed(47)
df <- as.data.frame(matrix(sample(5, 50, TRUE), ncol = 2))
df

p1 <- ggplot(df, aes(x = V1, y = V2)) + stat_summary(orientation = "x")
p1

p1_compute_panel <- ggtrace_capture_method(p1, method = StatSummary$compute_panel)

# `p1_compute_panel` is a copy of the ggproto method
body(p1_compute_panel)
ggbody(StatSummary$compute_panel, as.list = FALSE)

# Its arguments are pre-filled (captured at runtime)
formals(p1_compute_panel)

# Runs as it should
p1_compute_panel()

# You can inspect changes to its behavior outisde of ggplot
# For example, see what happens when aes is flipped via `orientation = "y"`
p1_compute_panel(flipped_aes = TRUE)

# We confirm this output to be true when `orientation = "y"`
p2 <- ggplot(df, aes(x = V1, y = V2)) + stat_summary(orientation = "y")
p2_compute_panel <- ggtrace_capture_method(p2, method = StatSummary$compute_panel)

identical(p1_compute_panel(flipped_aes = TRUE), p2_compute_panel())


# Note that the captured method looks slightly different if the method takes `...`
p3 <- ggplot(df, aes(x = V1, y = V2)) + stat_smooth() + geom_jitter()
p3

p3_compute_panel <- ggtrace_capture_method(p3, method = Stat$compute_panel)

# For one, the body is different
body(p3_compute_panel)

# What's returned is actually a wrapper to the method, stored in the `"inner"` attribute
attr(p3_compute_panel, "inner")

# Captured defaults are stored in the `.dots_captured` argument to the function
formals(p3_compute_panel)$.dots_captured

# You should not modify `.dots_captured` directly - they're just for you to inspect
# Instead, you should override these parameters in the `...`
head(p3_compute_panel())
head(p3_compute_panel(level = .99)[, c("ymin", "ymax")])
head(p3_compute_panel(flipped_aes = TRUE))

}
