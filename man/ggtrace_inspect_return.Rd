% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-inspect.R
\name{ggtrace_inspect_return}
\alias{ggtrace_inspect_return}
\title{Inspect the return value of a method}
\usage{
ggtrace_inspect_return(x, method, cond = quote(._counter_ == 1L))
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{cond}{When the return value should be inspected. Defaults to \code{quote(._counter_ == 1L)}.}
}
\value{
The return value from \code{method} when it is first called.
}
\description{
Inspect the return value of a method
}
\section{Tracing context}{

When quoted expressions are passed to the \code{cond} or \code{value} argument of
workflow functions (in the form of \verb{ggtrace_\{action\}_\{value\}()}), they are
evaluated in a special environment (which we call the "tracing context").

The tracing context is "data-masked" (via \code{rlang::eval_tidy()}), exposing
an internal variable called \code{._counter_} which tracks how many times a
function/method has been called in the evaluation of a ggplot supplied to
the \code{x} argument of workflow functions. For example, \code{cond = quote(._counter_ == 1)}
is evaluated as \code{TRUE} when the method is called for the first time, and
this is the default value of \code{cond} for workflow functions that only return
one value (e.g., \code{ggtrace_capture_fn()}).

For highjack functions like \code{ggtrace_highjack_return()}, the value about to
be returned by the function/method can be accessed with \code{returnValue()} in the
\code{value} argument. By default, \code{value} is set to \code{quote(returnValue())} which
simply evaluates to the return value, but directly computing on \code{returnValue()} to
derive a different return value for the function/method is also possible.
}

\examples{

library(ggplot2)

p1 <- ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut)) +
  facet_wrap(~ clarity)

p1

# Return value of `Stat$compute_panel` for the
# first panel `cond = quote(._counter_ == 1L)`
ggtrace_inspect_return(x = p1, method = Stat$compute_panel)

# Return value for 4th panel
ggtrace_inspect_return(x = p1, method = Stat$compute_panel,
                       cond = quote(._counter_ == 4L))

# Return value for 4th panel, 2nd group (bar)
ggtrace_inspect_return(
  x = p1, method = StatCount$compute_group,
  cond = quote(data$PANEL[1] == 4 && data$group == 2)
)

}
