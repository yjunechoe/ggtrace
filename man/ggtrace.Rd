% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ggtrace.R
\name{ggtrace}
\alias{ggtrace}
\title{Trace a ggproto method}
\usage{
ggtrace(method, obj, trace_steps, trace_exprs, .print = TRUE)
}
\arguments{
\item{method}{The method name as a string. Alternatively an expression
that evaluates to the ggproto method in the form of \code{ggproto$method}.}

\item{obj}{The ggproto object. Can be omitted if the method is an expression
in the form of \code{ggproto$method} that evalutes to the ggproto object's method.}

\item{trace_steps}{A list of positions in the method's callstack to trace.}

\item{trace_exprs}{A list of expressions to evaluate at each position specified
in \code{trace_steps}. If a single expression is provided, it is recycled.}

\item{.print}{Whether to print the output of each expression to the console.}
}
\description{
Trace a ggproto method
}
\details{
\code{ggtrace()} is a wrapper around \code{base::trace()} which is called on the ggproto method.
It calls \code{base::untrace()} on itself on exit by design, so its effect is ephemeral (like \code{base::debugonce()}).
A major feature is the ability to pass multiple positions and expressions to \code{trace_steps} and \code{trace_exprs}.
It is recommended to consult the output of \code{ggbody()} when deciding which expressions to evaluate at which steps.

The output of the expressions passed to \code{trace_exprs} is printed while tracing takes place. The last \code{ggtrace()}
trace dump is available for further inspection with \code{last_ggtrace()}.
}
\examples{
\dontrun{
library(ggplot2)
# `ggbody()` can be used to get the ggproto method's callstack as a list ----

## You can pass in the ggproto method to `ggbody()` in two ways:
longform <- ggbody("compute_group", StatCount)
shortform <- ggbody(StatCount$compute_group)
identical(longform, shortform)
longform

## Essentially, ggbody does the following under the hood:
## - `as.list(body(get("compute_group", StatCount)))`
## This long form of retrieving the ggproto method by specifying both the
## method and object separately is for compatibility with other ways
## of inspecting ggproto methods.
## - For example, this works: `debugonce(get("compute_group", StatCount))`
## - But this doesn't place a breakpoint: `debugonce(StatCount$compute_group)`

# `ggtrace()` allows you to debug ggproto methods PROGRAMMATICALLY. ----

## Comparisons with other ways of debugging/inspecting:
## --- <coming soon as a vignette, but sneak peak>:
## --- debug()/debugonce(), browser(), trace(), layer_data()

## After inspecting the ggproto method with `ggbody`, you can specify
## which expression(s) to evaluate where, in `trace_steps` and `trace_exprs`.

## Here's a ggplot to demonstrate. Let's imagine that we'd like to inspect PositionJitter
p <- ggplot(diamonds[1:1000,], aes(cut, depth)) +
  geom_point(position = position_jitter(width = 0.2, seed = 2021))
p
ggbody(PositionJitter$compute_layer)

## Example 1 ====
## Inspect what `data` look like at the start of the function
ggtrace(PositionJitter$compute_layer, trace_steps = 1, trace_exprs = rlang::expr(head(data)))
p

## Example 2 ====
## What does `data` look like at the end of the method? Unfortunately, `trace()` only lets us enter
## at the beginning of a step, so we can't inspect what happens after the last step is evaluated. To
## address this, `ggtrace()` offers a `~list` keyword which gets substituted for the current line.
ggtrace(PositionJitter$compute_layer, trace_steps = 12, trace_exprs = quote(head(~line)))
p

## Example 3 ====
## If we want both to be returned at the same time for an easier comparison, we can pass in a list
## of expressions. We use `rlang::exprs()` here to conveniently construct a list of expressions.
ggtrace(
  PositionJitter$compute_layer,
  trace_steps = c(1, 1, 12),
  trace_exprs = rlang::exprs(
    head(data),
    params,
    head(~line)
  )
)
p

## Example 4 ====
## We've been using `head()` for cleaner printing,
## but we can also disable this with `.print = FALSE`
ggtrace(
  PositionJitter$compute_layer,
  trace_steps = c(1, 12),
  trace_exprs = rlang::exprs(data, ~line),
  .print = FALSE
)
p

## Example 5 ====
## The output of the evaluated expressions can be inspected with `last_ggtrace()`
jitter_tracedump <- last_ggtrace()
lapply(jitter_tracedump, head)
hist(jitter_tracedump[[1]]$x - jitter_tracedump[[2]]$x)
}
}
