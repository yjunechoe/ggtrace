% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/workflows-inspect.R
\name{ggtrace_inspect_n}
\alias{ggtrace_inspect_n}
\title{Inspect how many times a method was called}
\usage{
ggtrace_inspect_n(x, method, ..., error = FALSE)
}
\arguments{
\item{x}{A ggplot object}

\item{method}{A function or a ggproto method.
The ggproto method may be specified using any of the following forms:
\itemize{
\item \code{ggproto$method}
\item \code{namespace::ggproto$method}
\item \code{namespace:::ggproto$method}
}}

\item{...}{Unused.}

\item{error}{If \code{TRUE}, continues inspecting the method until the ggplot errors.
This is useful for debugging but note that it can sometimes return incomplete output.}
}
\value{
The number of times \code{method} was called in the evaluation of \code{x}
}
\description{
Inspect how many times a method was called
}
\examples{

library(ggplot2)

p1 <- ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut)) +
  facet_wrap(~ clarity)

p1

# 1 call to Stat$compute_layer
ggtrace_inspect_n(p1, Stat$compute_layer)

# 8 calls to Stat$compute_panel
ggtrace_inspect_n(p1, Stat$compute_panel)

# Note that there are 0 calls to Stat$compute_group ...
ggtrace_inspect_n(p1, Stat$compute_group)

# because StatCount has its own "compute_group" method defined
ggtrace_inspect_n(p1, StatCount$compute_group)

# How about if we add a second layer that uses StatCount?
p2 <- p1 + geom_text(
  aes(label = after_stat(count)),
  stat = StatCount, position = position_nudge(y = 500)
)

p2

# Now there are double the calls to Stat/StatCount methods
ggtrace_inspect_n(p2, Stat$compute_layer)
ggtrace_inspect_n(p2, Stat$compute_panel)
ggtrace_inspect_n(p2, StatCount$compute_group)

# But separate calls to each layer's respective Geoms
ggtrace_inspect_n(p2, GeomBar$draw_panel)
ggtrace_inspect_n(p2, GeomText$draw_panel)

}
